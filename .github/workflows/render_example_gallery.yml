# Execute the examples, in the form of pythons scripts, and generate the example
# gallery using sphinx-gallery.
# Finally, trigger ReadTheDocs in the linked repository.

# This workflow was largely inspired by the following wradlib-notebooks CI task:
# https://github.com/wradlib/wradlib-notebooks/blob/main/.github/workflows/main.yml
name: Render the example gallery

env:
  # URL for the external repository linked with the notebooks in this project.
  PYSTEPS_MAIN_REPO: pySTEPS/pysteps

on:
  push:
    branches: [ rendering_logs ]

jobs:
  render_examples_gallery:
    name: Execute examples and generate the examples gallery
    runs-on: "ubuntu-latest"

    defaults:
      run:
        shell: bash -l {0}

    outputs:
      rtd_branch: ${{steps.set_render_branch.outputs.render_branch}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Parse commit message
        id: parse_commit_msg
        run: | 
          shopt -s expand_aliases
          alias print_commit_msg="git log -1 --pretty=%B"
          
          print_commit_msg | head -1 | grep -q "\[TRIGGER\]" || has_trigger_flag="no"
                    
          if [[ "${has_trigger_flag}" = "no" ]]; then
            echo "Incorrect commit message format"
            exit 1
          fi
                    
          function parse_keyword () {          
            keyword=$(print_commit_msg | grep "\[$1\]:" | cut -d ":" -f 2 | tr -d " ")
            [[ $? -ne 0 ]] && return 1            
            [[ -z "${keyword}" ]] && return 2
            
            echo $keyword
            return 0
          }
          
          # Example commit message
          #
          #  [TRIGGER] Trigger rendering from c0268d3
          #
          #  [EVENT_BRANCH]:decouple_triggering
          #  [PYSTEPS_BRANCH]: decouple_triggering
          #  [RTD_BRANCH]: decouple_triggering
          
          event_branch=$(parse_keyword "EVENT_BRANCH") || exit 2           
          pysteps_branch=$(parse_keyword "EVENT_BRANCH") || exit 3
          rtd_branch=$(parse_keyword "EVENT_BRANCH") || exit 4
          
          echo "::set-output name=event_branch::${event_branch}" 
          echo "::set-output name=pysteps_branch::${pysteps_branch}" 
          echo "::set-output name=rtd_branch::${rtd_branch}" 

      - name: Checkout pysteps repository at the branch that triggered the event
        uses: actions/checkout@v2
        with:
          repository: ${{ env.PYSTEPS_MAIN_REPO }}
          path: ${{ env.PYSTEPS_MAIN_REPO }}
          ref: ${{steps.parse_commit_msg.outputs.pysteps_branch}}

      - name: Determine render branch name
        id: set_render_branch
        working-directory: ${{ env.PYSTEPS_MAIN_REPO }}
        env:
          EVENT_BRANCH: ${{steps.parse_commit_msg.outputs.event_branch}}
        run: |
          render_branch="${EVENT_BRANCH}_rendered"
          
          # Check if the Linked repository current commit corresponds to a tag
          if [[ "${event_branch}" == "main" ]]; then
            render_branch="latest"
            
            # Tagged version are rendered in their own branch
            pysteps_tag=$(git name-rev --name-only --tags HEAD)            
            [[ "${pysteps_tag}" != "undefined" ]] && render_branch="${pysteps_tag}"            
          fi
          echo "::set-output name=render_branch::${render_branch}"

      - name: Print debug information
        env:
          RENDER_BRANCH: ${{steps.set_render_branch.outputs.render_branch}}
          EVENT_BRANCH: ${{steps.parse_commit_msg.outputs.event_branch}}
          PYSTEPS_BRANCH: ${{steps.parse_commit_msg.outputs.pysteps_branch}}
          RTD_BRANCH: ${{steps.parse_commit_msg.outputs.rtd_branch}}
        run: |
          echo "EVENT_BRANCH=${EVENT_BRANCH}"          
          echo "GITHUB_SHA=${GITHUB_SHA}"
          echo "RENDER_BRANCH=${RENDER_BRANCH}"
          echo "PYSTEPS_BRANCH=${PYSTEPS_BRANCH}"

      - name: Install mamba and create environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: environment.yml
          environment-name: doc_builder
          extra-specs: python=3.8

      - name: Install additional dependencies using pip
        run: |
          pip install -r docs/requirements.txt

      - name: Install package from the linked repository
        working-directory: ${{ env.PYSTEPS_MAIN_REPO }}
        run: |
          pip install .
          # actions/checkout@v2 only checkouts a single commit without tags
          # let's fetch the tags
          git fetch --all --tags
          git log HEAD

      - name: Install pysteps-data
        run: |
          python ci/fetch_pysteps_data.py $HOME/pysteps_data
          python -c "import pysteps; print(pysteps.config_fname())"  

      - name: Build examples gallery
        working-directory: ./docs
        run: |
          make html 

      - name: Commit the generated examples gallery
        env:
          RENDER_BRANCH: ${{steps.set_render_branch.outputs.render_branch}}
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          # Checkout changes in an orphan branch first.
          # We want to update only the examples_gallery directory
          git checkout --orphan tmp
          git reset
          git add -A docs
          git add -A -f docs/examples_gallery
          git add -A examples LICENSE README.md
          git commit -m "Generating gallery for $GITHUB_SHA"

          # Clean rest of the files.
          git clean -d -f -f

          # Switch to destination branch
          action=$(git ls-remote --exit-code --heads origin ${RENDER_BRANCH} > /dev/null || echo "push")
          if [ "$action" != "push" ] ; then
            git fetch origin ${RENDER_BRANCH}
            # If it exits, merge the changes and push.
            git merge --strategy=ours --allow-unrelated-histories origin/${RENDER_BRANCH} -m "Commit"

            # Add changes to the RENDER_BRANCH.
            git checkout -b ${RENDER_BRANCH} origin/${RENDER_BRANCH}
            git merge --squash tmp
            git commit --allow-empty -m "Rendering $GITHUB_SHA"
          fi
          # Otherwise, the next task will push the orpahn branch.

      - name: Push changes to the rendered branch
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{steps.set_render_branch.outputs.render_branch}}

#  trigger_rtd:
#    # Task adapted from the wradlib project
#    # https://github.com/wradlib/wradlib-notebooks/blob/main/.github/workflows/render_notebooks.yml
#    needs: [ run_notebooks ]
#    name: Trigger readthedocs
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        shell: bash -l {0}
#    env:
#      RTD_TOKEN: ${{ secrets.RTD_TOKEN }}
#      RTD_URL: ${{ secrets.RTD_URL }}
#      RTD_BRANCH: ${{ needs.run_notebooks.outputs.rtd_branch }}
#    steps:
#      - name: Trigger readthedocs for the corresponding branch (latest or tag)
#        run: |
#          # Ignore triggering if this workflow was triggered by the dev branch.
#          if [[ "${RTD_BRANCH}" != "test" ]]; then
#            curl -X POST -d "branches=${RTD_BRANCH}" -d "token=${RTD_TOKEN}" "${RTD_URL}"
#          fi